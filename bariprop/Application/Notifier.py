# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Application/Notifier.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os, pkgutil
import Application.resources as resources
from scrapy.utils.log import configure_logging
from scrapy.utils.project import get_project_settings
from twisted.internet import task, defer
from scrapy.crawler import CrawlerRunner
import Scraper.spiders

class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        self.spiders=[]
        for [_, spider, _] in pkgutil.iter_modules(Scraper.spiders.__path__):
            self.spiders.append(spider)
        self.appDir=QtCore.QDir.current().absolutePath()
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(300, 100)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.spinBox.setObjectName("spinBox")
        self.horizontalLayout.addWidget(self.spinBox)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.logButton = QtWidgets.QPushButton(self.centralwidget)
        self.logButton.setObjectName("logBtn")
        self.verticalLayout.addWidget(self.logButton)


        #self.icon = QtGui.QIcon("icon.png")#use the resource system
        self.icon = QtGui.QIcon(":/Icons/icon.png")
        self.tray = QtWidgets.QSystemTrayIcon()
        self.tray.setIcon(self.icon)
        self.tray.setVisible(True)
        self.trayMenu = QtWidgets.QMenu()

        def maximized():
            mainWindow.setVisible(True)
            mainWindow.showNormal()
            mainWindow.setFocus()
            self.tray.hide()

        def minimized():
            mainWindow.showMinimized()
            mainWindow.setVisible(False) 
            self.tray.show()
        
        self.maximize = QtWidgets.QAction("Open Settings")
        self.maximize.triggered.connect(maximized)

        self.quit = QtWidgets.QAction("Quit")

        self.minimize = QtWidgets.QAction("Minimize")
        self.minimize.triggered.connect(minimized)

        self.trayMenu.addAction(self.maximize)
        self.trayMenu.addAction(self.quit)
        self.tray.setContextMenu(self.trayMenu)
        self.tray.activated.connect(self.handleTray)
        

        mainWindow.setCentralWidget(self.centralwidget)

        ### Set up reactor
        #import sys
        self.runner = CrawlerRunner(get_project_settings())
        self.scrapTask = task.LoopingCall(self.periodically_run_spiders)
        configure_logging({'LOG_FORMAT': '%(levelname)s: %(message)s'})
        ###

        self.retranslateUi(mainWindow)
        self.pushButton.clicked.connect(self.handleStart)
        self.logButton.clicked.connect(self.handleOpenLog)
        self.quit.triggered.connect(mainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

        
        #self.reactor.runReturn()
        
        
    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "Apartament Search"))
        self.label.setText(_translate("mainWindow", "Run every"))
        self.spinBox.setSuffix(_translate("mainWindow", " h"))
        self.pushButton.setText(_translate("mainWindow", "Start"))
        self.logButton.setText(_translate("mainWindow", "Open log"))

    def handleStart(self):
        print("button clicked!")
        self.minimize.trigger()
        if self.scrapTask.running:
            self.scrapTask.stop()
        self.scrapTask.start(self.spinBox.value())

    def handleTray(self,reason):
        if reason == QtWidgets.QSystemTrayIcon.ActivationReason.Trigger:
            self.maximize.trigger()

    def handleOpenLog(self):
        os.system("notepad.exe items.jl")

    @defer.inlineCallbacks
    def run_spiders(self):
            self.scrapTask.stop()
            for spider in self.spiders:
                yield self.runner.crawl(spider)
            # d = self.runner.crawl('ferraro')
            #return self.runner.join()


    def periodically_run_spiders(self):
        d = self.run_spiders()
        d.addBoth(lambda _: self.scrapTask.start(self.spinBox.value(), False))
